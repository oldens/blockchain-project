import { db, ref, set, onValue, signInWithPopup } from "./firebase-config.js";

 
// –î–æ–¥–∞—î –±–ª–æ–∫ –¥–æ –±–∞–∑–∏
export async function addBlockToDatabase(block) {
    try {
        const timestamp = Date.now();  // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á
        await set(ref(db, `blockchain/${timestamp}`), block);
        console.log("‚úÖ –ë–ª–æ–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!");
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –±–ª–æ–∫—É:", error);
        if (error.message.includes("PERMISSION_DENIED: Permission denied")) {
            alert("‚ùó –î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Google. ");
        } else {
            alert("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: " + error.message);
        }
    }
}
 
// –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –±–ª–æ–∫–∏ –∑ –±–∞–∑–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö —è–∫ Promise
export function getAllBlocks() {
    return new Promise((resolve, reject) => {
        const blockchainRef = ref(db, 'blockchain/');

        onValue(
            blockchainRef,
            (snapshot) => {
                const data = snapshot.val();
                let blocks = [];

                if (data) {
                    for (const key in data) {
                        const block = data[key];
                        block.timestamp = parseInt(key); // –¥–æ–¥–∞—î–º–æ timestamp –∑ –∫–ª—é—á–∞
                        blocks.push(block);
                    }

                    // —Ç–µ–ø–µ—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
                    blocks.sort((a, b) => b.timestamp - a.timestamp);
                }

                resolve(blocks);
                displayMessages(blocks);
            },
            (error) => {
                if (error.message.includes("permission_denied")) {
                    alert("‚ùó –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±–ª–æ–∫—á–µ–π–Ω—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Google.");
                } else {
                    alert("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: " + error.message);
                }
                reject(error);
            }
        );
    });
}

// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–±–ª–æ–∫–∏) –∑ –±–ª–æ–∫—á–µ–π–Ω—É —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ó—Ö –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
async function displayMessages(blocks) {
    const messagesDiv = document.getElementById("messages");
    messagesDiv.innerHTML = "";

    try {
        blocks.forEach((block, index) => {
            const div = document.createElement("div");
            div.classList.add("card", "mb-3", "p-3"); // Using Bootstrap card styling
            div.innerHTML = `
                <p><strong>–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫:</strong> ${block.sender || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</p>
                <p><strong>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</strong> ${block.message || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</p>
                <p><strong>–ü—ñ–¥–ø–∏—Å:</strong> ${block.signature || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</p>
                <p><strong>–ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á:</strong> ${block.publicKey || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</p>
                <p><strong>–ß–∞—Å:</strong> ${block.timestamp ? new Date(block.timestamp).toLocaleString() : "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</p>
                <span id="validity-icon-${index}" class="validity-icon"></span>
            `;
            messagesDiv.appendChild(div);
        });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:", error);
    }
}



import { auth, provider } from './firebase-config.js';

export async function signInWithGoogle() {
    try {
        const result = await signInWithPopup(auth, provider);
        const user = result.user;
        console.log("–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥:", user.displayName);
        alert("üëã –ü—Ä–∏–≤—ñ—Ç, " + user.displayName);
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Google:", error);
        alert("‚ùå " + error.message);
    }
}